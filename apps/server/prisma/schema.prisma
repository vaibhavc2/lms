generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String?
  password   String
  avatarId   String?   @unique
  avatar     Avatar?
  role       Role      @default(user)
  isVerified Boolean   @default(false)
  disabled   Boolean   @default(false)
  disabledAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  reviews    Review[]
  comments   Comment[]

  @@index([email], name: "user_email_idx")
}

enum Role {
  user
  admin
}

model Avatar {
  id        String   @id @default(cuid())
  public_id String
  url       String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], name: "avatar_userId_idx")
}

model Review {
  id             Int      @id @default(autoincrement())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  rating         Float?
  comment        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reviewId       Int?
  commentReplies Review[] @relation("ReviewCommentReplies")
  parentReview   Review?  @relation("ReviewCommentReplies", fields: [reviewId], references: [id])
  courseId       Int?
  course         Course?  @relation(fields: [courseId], references: [id])

  @@index([userId], name: "review_userId_idx")
  @@index([courseId], name: "review_courseId_idx")
}

model Link {
  id           Int         @id @default(autoincrement())
  title        String
  url          String
  courseDataId Int?
  courseData   CourseData? @relation(fields: [courseDataId], references: [id])

  @@index([courseDataId], name: "link_courseDataId_idx")
}

model Comment {
  id              Int         @id @default(autoincrement())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  question        String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  commentId       Int?
  questionReplies Comment[]   @relation("CommentQuestionReplies")
  parentComment   Comment?    @relation("CommentQuestionReplies", fields: [commentId], references: [id])
  courseDataId    Int?
  courseData      CourseData? @relation(fields: [courseDataId], references: [id])

  @@index([userId], name: "comment_userId_idx")
  @@index([courseDataId], name: "comment_courseDataId_idx")
  @@index([commentId], name: "comment_commentId_idx")
}

model CourseData {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  videoUrl       String
  videoThumbnail Json
  videoSection   String
  videoLength    Int
  videoPlayer    String
  links          Link[]
  suggestion     String
  questions      Comment[]
  courseId       Int?
  course         Course?   @relation(fields: [courseId], references: [id])

  @@index([courseId], name: "courseData_courseId_idx")
}

model Course {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  categories     String
  price          Float
  estimatedPrice Float?
  thumbnail      Json
  tags           String
  level          String
  demoUrl        String
  benefits       Json[]
  prerequisites  Json[]
  reviews        Review[]
  courseData     CourseData[]
  ratings        Float?       @default(0)
  purchased      Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([name], name: "course_name_idx")
  @@index([categories], name: "course_categories_idx")
  @@index([price], name: "course_price_idx")
}
